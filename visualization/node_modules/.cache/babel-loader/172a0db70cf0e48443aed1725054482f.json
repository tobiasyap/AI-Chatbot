{"ast":null,"code":"var _jsxFileName = \"/Users/xuehui/Desktop/NUS_Stuff/AY2122.1_Y4S1/Capstone/lta-visualization/frontend/src/components/Barchart.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport { BarChart } from 'reaviz';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Barchart() {\n  _s();\n\n  const [barData, setBarData] = useState([]); // const uploadData = new FormData(data.target);\n  // const backendUrl = \"http://localhost:8080\"; // change to whatever\n  // axios.get(`${backendUrl}/api/feedback`)\n  //   .then((res) => {\n  //     setSubmitted(res);\n  //   })\n  //   .catch((error) => {\n  //     setError(error);\n  //     console.log(error)\n  //   });\n\n  function calculateOccurrence(data) {\n    let wordFreq = [];\n    let allWords = {};\n\n    for (let i = 0; i < data.length; i++) {\n      var words = data[i].user_query.split(\" \");\n\n      for (let j = 0; j < words.length; j++) {\n        if (!(words[j] in allWords)) {\n          allWords[words[j]] = 1;\n        } else {\n          allWords[words[j]] += 1;\n        }\n      }\n    }\n\n    for (var word in allWords) {\n      wordFreq.push([word, allWords[word]]);\n    }\n\n    wordFreq = wordFreq.sort((a, b) => b[1] - a[1]); // let wordFrequencyData = [];\n    // for (let i=0; i < wordFreq.length; i++) {\n    //   wordFrequencyData.push({ key: wordFreq[i][0], data: wordFreq[i][1] });\n    // // var wordFreq = wordFrequencyData.map(([key, data]) => ({key, data}));\n    // }\n\n    var wordFrequencyData = wordFreq.map(_ref => {\n      let [key, data] = _ref;\n      return {\n        key,\n        data\n      };\n    });\n    console.log(wordFrequencyData);\n    return wordFrequencyData;\n  }\n\n  ;\n  useEffect(() => {\n    let isMounted = true;\n    fetch(\"http://localhost:8080/api/feedback\", {\n      method: \"GET\"\n    }).then(res => {\n      if (isMounted) setBarData(calculateOccurrence(res.json())); // setBarData(calculateOccurrence(data).map(([key, data]) => ({key, data})))\n    });\n    return () => {\n      isMounted = false;\n    }; // async function getFeedback() {\n    //   let res = await fetch(\"http://localhost:8080/api/feedback\");\n    //   res = await res.json();\n    //   setBarData(barData => ([...barData, calculateOccurrence(res)])); \n    //   console.log(barData); \n    // };\n    // getFeedback();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(BarChart, {\n      data: barData // data={[\n      //   {key: \"A\", data: 1},\n      //   {key: \"B\", data: 2}\n      // ]}\n      ,\n      height: 300,\n      width: 300\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }, this), \"Barchart here!\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 7\n  }, this);\n}\n\n_s(Barchart, \"95clpMumGM2pmqWtKGnx+m6/6Zo=\");\n\n_c = Barchart;\n\nvar _c;\n\n$RefreshReg$(_c, \"Barchart\");","map":{"version":3,"sources":["/Users/xuehui/Desktop/NUS_Stuff/AY2122.1_Y4S1/Capstone/lta-visualization/frontend/src/components/Barchart.js"],"names":["useState","useEffect","BarChart","Barchart","barData","setBarData","calculateOccurrence","data","wordFreq","allWords","i","length","words","user_query","split","j","word","push","sort","a","b","wordFrequencyData","map","key","console","log","isMounted","fetch","method","then","res","json"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,QAAT,QAAyB,QAAzB;;AAEA,eAAe,SAASC,QAAT,GAAoB;AAAA;;AAC/B,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBL,QAAQ,CAAC,EAAD,CAAtC,CAD+B,CAG/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,WAASM,mBAAT,CAA6BC,IAA7B,EAAmC;AACjC,QAAIC,QAAQ,GAAG,EAAf;AACA,QAAIC,QAAQ,GAAG,EAAf;;AACA,SAAK,IAAIC,CAAC,GAAC,CAAX,EAAcA,CAAC,GAAGH,IAAI,CAACI,MAAvB,EAA+BD,CAAC,EAAhC,EAAoC;AAClC,UAAIE,KAAK,GAAGL,IAAI,CAACG,CAAD,CAAJ,CAAQG,UAAR,CAAmBC,KAAnB,CAAyB,GAAzB,CAAZ;;AACA,WAAK,IAAIC,CAAC,GAAC,CAAX,EAAcA,CAAC,GAAGH,KAAK,CAACD,MAAxB,EAAgCI,CAAC,EAAjC,EAAqC;AACnC,YAAI,EAAEH,KAAK,CAACG,CAAD,CAAL,IAAYN,QAAd,CAAJ,EAA6B;AAC3BA,UAAAA,QAAQ,CAACG,KAAK,CAACG,CAAD,CAAN,CAAR,GAAqB,CAArB;AACD,SAFD,MAEO;AACLN,UAAAA,QAAQ,CAACG,KAAK,CAACG,CAAD,CAAN,CAAR,IAAsB,CAAtB;AACD;AACF;AACF;;AACD,SAAK,IAAIC,IAAT,IAAiBP,QAAjB,EAA2B;AACzBD,MAAAA,QAAQ,CAACS,IAAT,CAAc,CAACD,IAAD,EAAOP,QAAQ,CAACO,IAAD,CAAf,CAAd;AACD;;AACDR,IAAAA,QAAQ,GAAGA,QAAQ,CAACU,IAAT,CAAc,CAACC,CAAD,EAAIC,CAAJ,KAAUA,CAAC,CAAC,CAAD,CAAD,GAAOD,CAAC,CAAC,CAAD,CAAhC,CAAX,CAhBiC,CAiBjC;AACA;AACA;AACA;AACA;;AACA,QAAIE,iBAAiB,GAAGb,QAAQ,CAACc,GAAT,CAAa;AAAA,UAAC,CAACC,GAAD,EAAMhB,IAAN,CAAD;AAAA,aAAkB;AAACgB,QAAAA,GAAD;AAAMhB,QAAAA;AAAN,OAAlB;AAAA,KAAb,CAAxB;AACAiB,IAAAA,OAAO,CAACC,GAAR,CAAYJ,iBAAZ;AACA,WAAOA,iBAAP;AACD;;AAAA;AAEDpB,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIyB,SAAS,GAAG,IAAhB;AACAC,IAAAA,KAAK,CAAC,oCAAD,EAAuC;AAC1CC,MAAAA,MAAM,EAAE;AADkC,KAAvC,CAAL,CAGCC,IAHD,CAGMC,GAAG,IAAI;AACX,UAAIJ,SAAJ,EAAerB,UAAU,CAACC,mBAAmB,CAACwB,GAAG,CAACC,IAAJ,EAAD,CAApB,CAAV,CADJ,CAEX;AACD,KAND;AAOA,WAAO,MAAM;AAAEL,MAAAA,SAAS,GAAG,KAAZ;AAAmB,KAAlC,CATY,CAUd;AACE;AACA;AACA;AACA;AACA;AAEA;AACH,GAlBQ,EAkBN,EAlBM,CAAT;AAoBA,sBACE;AAAA,4BACE,QAAC,QAAD;AACA,MAAA,IAAI,EAAEtB,OADN,CAEA;AACA;AACA;AACA;AALA;AAMA,MAAA,MAAM,EAAE,GANR;AAOA,MAAA,KAAK,EAAE;AAPP;AAAA;AAAA;AAAA;AAAA,YADF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAcH;;GA1EuBD,Q;;KAAAA,Q","sourcesContent":["import { useState, useEffect } from 'react';\nimport { BarChart } from 'reaviz';\n\nexport default function Barchart() {\n    const [barData, setBarData] = useState([]);\n\n    // const uploadData = new FormData(data.target);\n    // const backendUrl = \"http://localhost:8080\"; // change to whatever\n    // axios.get(`${backendUrl}/api/feedback`)\n    //   .then((res) => {\n    //     setSubmitted(res);\n    //   })\n    //   .catch((error) => {\n    //     setError(error);\n    //     console.log(error)\n    //   });\n    function calculateOccurrence(data) {\n      let wordFreq = [];\n      let allWords = {};\n      for (let i=0; i < data.length; i++) {\n        var words = data[i].user_query.split(\" \")\n        for (let j=0; j < words.length; j++) {\n          if (!(words[j] in allWords)) {\n            allWords[words[j]] = 1\n          } else {\n            allWords[words[j]] += 1\n          }\n        }\n      }\n      for (var word in allWords) {\n        wordFreq.push([word, allWords[word]])\n      }\n      wordFreq = wordFreq.sort((a, b) => b[1] - a[1]);\n      // let wordFrequencyData = [];\n      // for (let i=0; i < wordFreq.length; i++) {\n      //   wordFrequencyData.push({ key: wordFreq[i][0], data: wordFreq[i][1] });\n      // // var wordFreq = wordFrequencyData.map(([key, data]) => ({key, data}));\n      // }\n      var wordFrequencyData = wordFreq.map(([key, data]) => ({key, data}));\n      console.log(wordFrequencyData);\n      return wordFrequencyData;\n    };\n\n    useEffect(() => {\n        let isMounted = true;\n        fetch(\"http://localhost:8080/api/feedback\", {\n          method: \"GET\"\n        })\n        .then(res => {\n          if (isMounted) setBarData(calculateOccurrence(res.json()));\n          // setBarData(calculateOccurrence(data).map(([key, data]) => ({key, data})))\n        });\n        return () => { isMounted = false };\n      // async function getFeedback() {\n        //   let res = await fetch(\"http://localhost:8080/api/feedback\");\n        //   res = await res.json();\n        //   setBarData(barData => ([...barData, calculateOccurrence(res)])); \n        //   console.log(barData); \n        // };\n\n        // getFeedback();\n    }, []);\n\n    return (\n      <div>\n        <BarChart \n        data={barData}\n        // data={[\n        //   {key: \"A\", data: 1},\n        //   {key: \"B\", data: 2}\n        // ]}\n        height={300}\n        width={300}\n        />\n        Barchart here! \n      </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}