{"ast":null,"code":"var _jsxFileName = \"/Users/xuehui/Desktop/NUS_Stuff/AY2122.1_Y4S1/Capstone/LTA-chatbot/visualization/src/components/Barchart.js\";\nimport { Component } from \"react\";\nimport { BarChart, XAxis, YAxis, Tooltip, Bar } from \"recharts\";\nimport { url } from \"../config\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass Barchart extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      barData: []\n    };\n  }\n\n  async componentDidMount() {\n    try {\n      let response = await fetch(`${url}/feedback`, {\n        method: \"GET\"\n      });\n      let data = await response.json(); // Obtaining frequency of words from user queries\n\n      let wordFreq = [];\n      let allWords = {};\n\n      for (let i = 0; i < data.length; i++) {\n        var words = data[i].user_query.split(\" \");\n\n        for (let j = 0; j < words.length; j++) {\n          let word = words[j].toLowerCase();\n\n          if (!(word in allWords)) {\n            allWords[word] = 1;\n          } else {\n            allWords[word] += 1;\n          }\n        }\n      } // Sorting them in descending order of frequency\n\n\n      for (var word in allWords) {\n        wordFreq.push([word, allWords[word]]);\n      }\n\n      wordFreq = wordFreq.sort((a, b) => b[1] - a[1]);\n      wordFreq = wordFreq.map(_ref => {\n        let [word, count] = _ref;\n        return {\n          word,\n          count\n        };\n      });\n      await this.setState({\n        barData: wordFreq.slice(0, 10) // Obtaining only top 10 most commonly used words\n\n      });\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  render() {\n    const {\n      barData\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-title\",\n        children: /*#__PURE__*/_jsxDEV(\"strong\", {\n          className: \"title-name\",\n          children: \"Most Frequently Used Words in Queries\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: barData.length ? /*#__PURE__*/_jsxDEV(BarChart, {\n          data: barData,\n          height: 300,\n          width: 650,\n          isAnimationActive: true,\n          children: [/*#__PURE__*/_jsxDEV(XAxis, {\n            dataKey: \"word\",\n            angle: -90\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(Bar, {\n            dataKey: \"count\",\n            fill: \"#ff9558\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 9\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chart-title\",\n          children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 44\n          }, this), \" There is no data yet! \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 15\n        }, this)\n      }, void 0, false)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Barchart;","map":{"version":3,"sources":["/Users/xuehui/Desktop/NUS_Stuff/AY2122.1_Y4S1/Capstone/LTA-chatbot/visualization/src/components/Barchart.js"],"names":["Component","BarChart","XAxis","YAxis","Tooltip","Bar","url","Barchart","constructor","props","state","barData","componentDidMount","response","fetch","method","data","json","wordFreq","allWords","i","length","words","user_query","split","j","word","toLowerCase","push","sort","a","b","map","count","setState","slice","err","console","log","render"],"mappings":"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","sourcesContent":["import { Component } from \"react\";\nimport { BarChart, XAxis, YAxis, Tooltip, Bar } from \"recharts\";\nimport { url } from \"../config\";\n\nclass Barchart extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      barData: [],\n    };\n  }\n\n  async componentDidMount() {\n    try {\n      let response = await fetch(`${url}/feedback`, {\n        method: \"GET\",\n      });\n\n      let data = await response.json();\n      // Obtaining frequency of words from user queries\n      let wordFreq = [];\n      let allWords = {};\n      for (let i = 0; i < data.length; i++) {\n        var words = data[i].user_query.split(\" \");\n        for (let j = 0; j < words.length; j++) {\n          let word = words[j].toLowerCase();\n          if (!(word in allWords)) {\n            allWords[word] = 1;\n          } else {\n            allWords[word] += 1;\n          }\n        }\n      }\n      // Sorting them in descending order of frequency\n      for (var word in allWords) {\n        wordFreq.push([word, allWords[word]]);\n      }\n      wordFreq = wordFreq.sort((a, b) => b[1] - a[1]);\n      wordFreq = wordFreq.map(([word, count]) => ({ word, count }));\n      await this.setState({\n        barData: wordFreq.slice(0, 10), // Obtaining only top 10 most commonly used words\n      });\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  render() {\n    const { barData } = this.state;\n\n    return (\n      <div>\n        <div className=\"chart-title\">\n          <strong className=\"title-name\">\n            Most Frequently Used Words in Queries\n          </strong>\n        </div>\n        <>\n        {barData.length ? (\n        <BarChart\n        data={barData}\n        height={300}\n        width={650}\n        isAnimationActive={true}\n      >\n        <XAxis dataKey=\"word\" angle={-90}/>\n        <YAxis />\n        <Tooltip />\n        <Bar dataKey=\"count\" fill=\"#ff9558\" />\n      </BarChart>\n        ) : ( <div className=\"chart-title\"><br/> There is no data yet! </div> ) }\n        </>\n      </div>\n    );\n  }\n}\n\nexport default Barchart;\n"]},"metadata":{},"sourceType":"module"}