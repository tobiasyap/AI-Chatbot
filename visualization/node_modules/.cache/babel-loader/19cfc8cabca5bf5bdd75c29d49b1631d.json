{"ast":null,"code":"var _jsxFileName = \"/Users/xuehui/Desktop/NUS_Stuff/AY2122.1_Y4S1/Capstone/lta-visualization/frontend/src/components/Barchart.js\";\nimport { Component } from \"react\"; // import { useState, useEffect } from 'react';\n\nimport { BarChart, CartesianGrid, XAxis, YAxis, Tooltip, Bar, Legend } from \"recharts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Barchart extends Component {\n  constructor(props) {\n    super(props);\n\n    this.loadData = async () => {\n      let response = await fetch(\"http://localhost:8080/api/feedback\", {\n        method: \"GET\"\n      });\n      let data = await response.json();\n      let wordFreq = [];\n      let allWords = {};\n\n      for (let i = 0; i < data.length; i++) {\n        var words = data[i].user_query.split(\" \");\n\n        for (let j = 0; j < words.length; j++) {\n          let word = words[j].toLowerCase();\n\n          if (!(word in allWords)) {\n            allWords[word] = 1;\n          } else {\n            allWords[word] += 1;\n          }\n        }\n      }\n\n      for (var word in allWords) {\n        wordFreq.push([word, allWords[word]]);\n      }\n\n      wordFreq = wordFreq.sort((a, b) => b[1] - a[1]);\n      wordFreq = wordFreq.map(_ref => {\n        let [word, count] = _ref;\n        return {\n          word,\n          count\n        };\n      });\n      await this.setState({\n        barData: wordFreq,\n        loaded: true\n      });\n      console.log(this.state.barData); // return wordFrequencyData;\n    };\n\n    this.loadData = this.loadData.bind(this);\n    this.state = {\n      loaded: false,\n      barData: []\n    };\n  }\n\n  async componentDidMount() {\n    if (!this.state.loaded) {\n      await this.loadData();\n    } // await this.setState({\n    //   barData: data\n    // });\n    // console.log(data);\n    // await this.calculateOccurrence(data);\n    // if (this.state.loaded === false) {\n    //   await this.setState({\n    //     loaded: true,\n    //     barData: data\n    //   });\n    // }\n    // setBarData(calculateOccurrence(data).map(([key, data]) => ({key, data})))\n\n  }\n\n  render() {\n    const {\n      barData\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(BarChart // data={barData.map(([key, data]) => ({key, data}))}\n      , {\n        data: barData // data={[\n        //   {key: \"A\", data: 1},\n        //   {key: \"B\", data: 2}\n        // ]}\n        ,\n        height: 300,\n        width: 500 // margin={{\n        //   top: 5,\n        //   right: 30,\n        //   left: 20,\n        //   bottom: 5,\n        // }}\n        ,\n        children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n          strokeDasharray: \"3 3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n          dataKey: \"word\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Bar, {\n          dataKey: \"word\",\n          fill: \"#8884d8\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Bar, {\n          dataKey: \"count\",\n          fill: \"#8884d8\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Barchart; // export default function Barchart() {\n//     const [barData, setBarData] = useState([]);\n//     // const uploadData = new FormData(data.target);\n//     // const backendUrl = \"http://localhost:8080\"; // change to whatever\n//     // axios.get(`${backendUrl}/api/feedback`)\n//     //   .then((res) => {\n//     //     setSubmitted(res);\n//     //   })\n//     //   .catch((error) => {\n//     //     setError(error);\n//     //     console.log(error)\n//     //   });\n//     function calculateOccurrence(data) {\n//       let wordFreq = [];\n//       let allWords = {};\n//       for (let i=0; i < data.length; i++) {\n//         var words = data[i].user_query.split(\" \")\n//         for (let j=0; j < words.length; j++) {\n//           if (!(words[j] in allWords)) {\n//             allWords[words[j]] = 1\n//           } else {\n//             allWords[words[j]] += 1\n//           }\n//         }\n//       }\n//       for (var word in allWords) {\n//         wordFreq.push([word, allWords[word]])\n//       }\n//       wordFreq = wordFreq.sort((a, b) => b[1] - a[1]);\n//       // let wordFrequencyData = [];\n//       // for (let i=0; i < wordFreq.length; i++) {\n//       //   wordFrequencyData.push({ key: wordFreq[i][0], data: wordFreq[i][1] });\n//       // // var wordFreq = wordFrequencyData.map(([key, data]) => ({key, data}));\n//       // }\n//       var wordFrequencyData = wordFreq.map(([key, data]) => ({key, data}));\n//       console.log(wordFrequencyData);\n//       return wordFrequencyData;\n//     };\n//     useEffect(() => {\n//         let isMounted = true;\n//         fetch(\"http://localhost:8080/api/feedback\", {\n//           method: \"GET\"\n//         })\n//         .then(res => res.json())\n//         .then(data => {\n//           if (isMounted) setBarData(calculateOccurrence(data));\n//           // setBarData(calculateOccurrence(data).map(([key, data]) => ({key, data})))\n//         });\n//         return () => { isMounted = false};\n//       // async function getFeedback() {\n//         //   let res = await fetch(\"http://localhost:8080/api/feedback\");\n//         //   res = await res.json();\n//         //   setBarData(barData => ([...barData, calculateOccurrence(res)]));\n//         //   console.log(barData);\n//         // };\n//         // getFeedback();\n//     }, []);\n//     return (\n//       <div>\n//         <BarChart\n//         data={barData}\n//         // data={[\n//         //   {key: \"A\", data: 1},\n//         //   {key: \"B\", data: 2}\n//         // ]}\n//         height={300}\n//         width={300}\n//         />\n//         Barchart here!\n//       </div>\n//     )\n// }","map":{"version":3,"sources":["/Users/xuehui/Desktop/NUS_Stuff/AY2122.1_Y4S1/Capstone/lta-visualization/frontend/src/components/Barchart.js"],"names":["Component","BarChart","CartesianGrid","XAxis","YAxis","Tooltip","Bar","Legend","Barchart","constructor","props","loadData","response","fetch","method","data","json","wordFreq","allWords","i","length","words","user_query","split","j","word","toLowerCase","push","sort","a","b","map","count","setState","barData","loaded","console","log","state","bind","componentDidMount","render"],"mappings":"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","sourcesContent":["import { Component } from \"react\";\n// import { useState, useEffect } from 'react';\nimport {\n  BarChart,\n  CartesianGrid,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Bar,\n  Legend,\n} from \"recharts\";\n\nclass Barchart extends Component {\n  constructor(props) {\n    super(props);\n    this.loadData = this.loadData.bind(this);\n    this.state = {\n      loaded: false,\n      barData: [],\n    };\n  }\n\n  async componentDidMount() {\n    if (!this.state.loaded) {\n      await this.loadData();\n    }\n\n    // await this.setState({\n    //   barData: data\n    // });\n    // console.log(data);\n    // await this.calculateOccurrence(data);\n    // if (this.state.loaded === false) {\n    //   await this.setState({\n    //     loaded: true,\n    //     barData: data\n    //   });\n    // }\n    // setBarData(calculateOccurrence(data).map(([key, data]) => ({key, data})))\n  }\n\n  loadData = async () => {\n    let response = await fetch(\"http://localhost:8080/api/feedback\", {\n      method: \"GET\",\n    });\n\n    let data = await response.json();\n    let wordFreq = [];\n    let allWords = {};\n    for (let i = 0; i < data.length; i++) {\n      var words = data[i].user_query.split(\" \");\n      for (let j = 0; j < words.length; j++) {\n        let word = words[j].toLowerCase();\n        if (!(word in allWords)) {\n          allWords[word] = 1;\n        } else {\n          allWords[word] += 1;\n        }\n      }\n    }\n    for (var word in allWords) {\n      wordFreq.push([word, allWords[word]]);\n    }\n    wordFreq = wordFreq.sort((a, b) => b[1] - a[1]);\n    wordFreq = wordFreq.map(([word, count]) => ({ word, count }));\n    await this.setState({\n      barData: wordFreq,\n      loaded: true,\n    });\n    console.log(this.state.barData);\n    // return wordFrequencyData;\n  };\n\n  render() {\n    const { barData } = this.state;\n\n    return (\n      <div>\n        <BarChart\n          // data={barData.map(([key, data]) => ({key, data}))}\n          data={barData}\n          // data={[\n          //   {key: \"A\", data: 1},\n          //   {key: \"B\", data: 2}\n          // ]}\n          height={300}\n          width={500}\n          // margin={{\n          //   top: 5,\n          //   right: 30,\n          //   left: 20,\n          //   bottom: 5,\n          // }}\n        >\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis dataKey=\"word\" />\n          <YAxis />\n          <Tooltip />\n          <Legend />\n          <Bar dataKey=\"word\" fill=\"#8884d8\" />\n          <Bar dataKey=\"count\" fill=\"#8884d8\" />\n        </BarChart>\n      </div>\n    );\n  }\n}\n\nexport default Barchart;\n\n// export default function Barchart() {\n//     const [barData, setBarData] = useState([]);\n\n//     // const uploadData = new FormData(data.target);\n//     // const backendUrl = \"http://localhost:8080\"; // change to whatever\n//     // axios.get(`${backendUrl}/api/feedback`)\n//     //   .then((res) => {\n//     //     setSubmitted(res);\n//     //   })\n//     //   .catch((error) => {\n//     //     setError(error);\n//     //     console.log(error)\n//     //   });\n//     function calculateOccurrence(data) {\n//       let wordFreq = [];\n//       let allWords = {};\n//       for (let i=0; i < data.length; i++) {\n//         var words = data[i].user_query.split(\" \")\n//         for (let j=0; j < words.length; j++) {\n//           if (!(words[j] in allWords)) {\n//             allWords[words[j]] = 1\n//           } else {\n//             allWords[words[j]] += 1\n//           }\n//         }\n//       }\n//       for (var word in allWords) {\n//         wordFreq.push([word, allWords[word]])\n//       }\n//       wordFreq = wordFreq.sort((a, b) => b[1] - a[1]);\n//       // let wordFrequencyData = [];\n//       // for (let i=0; i < wordFreq.length; i++) {\n//       //   wordFrequencyData.push({ key: wordFreq[i][0], data: wordFreq[i][1] });\n//       // // var wordFreq = wordFrequencyData.map(([key, data]) => ({key, data}));\n//       // }\n//       var wordFrequencyData = wordFreq.map(([key, data]) => ({key, data}));\n//       console.log(wordFrequencyData);\n//       return wordFrequencyData;\n//     };\n\n//     useEffect(() => {\n//         let isMounted = true;\n//         fetch(\"http://localhost:8080/api/feedback\", {\n//           method: \"GET\"\n//         })\n//         .then(res => res.json())\n//         .then(data => {\n//           if (isMounted) setBarData(calculateOccurrence(data));\n//           // setBarData(calculateOccurrence(data).map(([key, data]) => ({key, data})))\n//         });\n//         return () => { isMounted = false};\n//       // async function getFeedback() {\n//         //   let res = await fetch(\"http://localhost:8080/api/feedback\");\n//         //   res = await res.json();\n//         //   setBarData(barData => ([...barData, calculateOccurrence(res)]));\n//         //   console.log(barData);\n//         // };\n\n//         // getFeedback();\n//     }, []);\n\n//     return (\n//       <div>\n//         <BarChart\n//         data={barData}\n//         // data={[\n//         //   {key: \"A\", data: 1},\n//         //   {key: \"B\", data: 2}\n//         // ]}\n//         height={300}\n//         width={300}\n//         />\n//         Barchart here!\n//       </div>\n//     )\n// }\n"]},"metadata":{},"sourceType":"module"}