{"ast":null,"code":"var _jsxFileName = \"/Users/xuehui/Desktop/NUS_Stuff/AY2122.1_Y4S1/Capstone/lta-visualization/frontend/src/components/Barchart.js\";\nimport { Component } from 'react'; // import { useState, useEffect } from 'react';\n\nimport { BarChart } from 'reaviz';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Barchart extends Component {\n  constructor(props) {\n    super(props);\n    this.calculateOccurrence = this.calculateOccurrence.bind(this);\n    this.state = {\n      barData: []\n    };\n  }\n\n  async componentDidMount() {\n    let response = await fetch(\"http://localhost:8080/api/feedback\", {\n      method: \"GET\"\n    });\n    let data = await response.json();\n    await this.setState({\n      barData: this.calculateOccurrence(data)\n    }); // setBarData(calculateOccurrence(data).map(([key, data]) => ({key, data})))\n  }\n\n  calculateOccurrence(data) {\n    let wordFreq = [];\n    let allWords = {};\n\n    for (let i = 0; i < data.length; i++) {\n      var words = data[i].user_query.split(\" \");\n\n      for (let j = 0; j < words.length; j++) {\n        if (!(words[j] in allWords)) {\n          allWords[words[j]] = 1;\n        } else {\n          allWords[words[j]] += 1;\n        }\n      }\n    }\n\n    for (var word in allWords) {\n      wordFreq.push([word, allWords[word]]);\n    }\n\n    wordFreq = wordFreq.sort((a, b) => b[1] - a[1]);\n    var wordFrequencyData = wordFreq.map(_ref => {\n      let [key, data] = _ref;\n      return {\n        key,\n        data\n      };\n    });\n    console.log(wordFrequencyData);\n    return wordFrequencyData;\n  }\n\n  render() {\n    const {\n      barData\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(BarChart, {\n        data: barData // data={[\n        //   {key: \"A\", data: 1},\n        //   {key: \"B\", data: 2}\n        // ]}\n        ,\n        height: 300,\n        width: 300\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), \"Barchart here!\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Barchart; // export default function Barchart() {\n//     const [barData, setBarData] = useState([]);\n//     // const uploadData = new FormData(data.target);\n//     // const backendUrl = \"http://localhost:8080\"; // change to whatever\n//     // axios.get(`${backendUrl}/api/feedback`)\n//     //   .then((res) => {\n//     //     setSubmitted(res);\n//     //   })\n//     //   .catch((error) => {\n//     //     setError(error);\n//     //     console.log(error)\n//     //   });\n//     function calculateOccurrence(data) {\n//       let wordFreq = [];\n//       let allWords = {};\n//       for (let i=0; i < data.length; i++) {\n//         var words = data[i].user_query.split(\" \")\n//         for (let j=0; j < words.length; j++) {\n//           if (!(words[j] in allWords)) {\n//             allWords[words[j]] = 1\n//           } else {\n//             allWords[words[j]] += 1\n//           }\n//         }\n//       }\n//       for (var word in allWords) {\n//         wordFreq.push([word, allWords[word]])\n//       }\n//       wordFreq = wordFreq.sort((a, b) => b[1] - a[1]);\n//       // let wordFrequencyData = [];\n//       // for (let i=0; i < wordFreq.length; i++) {\n//       //   wordFrequencyData.push({ key: wordFreq[i][0], data: wordFreq[i][1] });\n//       // // var wordFreq = wordFrequencyData.map(([key, data]) => ({key, data}));\n//       // }\n//       var wordFrequencyData = wordFreq.map(([key, data]) => ({key, data}));\n//       console.log(wordFrequencyData);\n//       return wordFrequencyData;\n//     };\n//     useEffect(() => {\n//         let isMounted = true;\n//         fetch(\"http://localhost:8080/api/feedback\", {\n//           method: \"GET\"\n//         })\n//         .then(res => res.json())\n//         .then(data => {\n//           if (isMounted) setBarData(calculateOccurrence(data));\n//           // setBarData(calculateOccurrence(data).map(([key, data]) => ({key, data})))\n//         });\n//         return () => { isMounted = false};\n//       // async function getFeedback() {\n//         //   let res = await fetch(\"http://localhost:8080/api/feedback\");\n//         //   res = await res.json();\n//         //   setBarData(barData => ([...barData, calculateOccurrence(res)])); \n//         //   console.log(barData); \n//         // };\n//         // getFeedback();\n//     }, []);\n//     return (\n//       <div>\n//         <BarChart \n//         data={barData}\n//         // data={[\n//         //   {key: \"A\", data: 1},\n//         //   {key: \"B\", data: 2}\n//         // ]}\n//         height={300}\n//         width={300}\n//         />\n//         Barchart here! \n//       </div>\n//     )\n// }","map":{"version":3,"sources":["/Users/xuehui/Desktop/NUS_Stuff/AY2122.1_Y4S1/Capstone/lta-visualization/frontend/src/components/Barchart.js"],"names":["Component","BarChart","Barchart","constructor","props","calculateOccurrence","bind","state","barData","componentDidMount","response","fetch","method","data","json","setState","wordFreq","allWords","i","length","words","user_query","split","j","word","push","sort","a","b","wordFrequencyData","map","key","console","log","render"],"mappings":"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","sourcesContent":["import { Component } from 'react';\n// import { useState, useEffect } from 'react';\nimport { BarChart } from 'reaviz';\n\nclass Barchart extends Component {\n  constructor(props) {\n    super(props);\n    this.calculateOccurrence = this.calculateOccurrence.bind(this);\n    this.state = {\n      barData: []\n    }\n  }\n\n  async componentDidMount() {\n      let response = await fetch(\"http://localhost:8080/api/feedback\", {\n        method: \"GET\"\n      });\n      let data = await response.json();\n      await this.setState({\n        barData: this.calculateOccurrence(data)\n      });\n        // setBarData(calculateOccurrence(data).map(([key, data]) => ({key, data})))\n  }\n\n  calculateOccurrence(data) { \n      let wordFreq = [];\n      let allWords = {};\n      for (let i=0; i < data.length; i++) {\n        var words = data[i].user_query.split(\" \")\n        for (let j=0; j < words.length; j++) {\n          if (!(words[j] in allWords)) {\n            allWords[words[j]] = 1\n          } else {\n            allWords[words[j]] += 1\n          }\n        }\n      }\n      for (var word in allWords) {\n        wordFreq.push([word, allWords[word]])\n      }\n      wordFreq = wordFreq.sort((a, b) => b[1] - a[1]);\n      var wordFrequencyData = wordFreq.map(([key, data]) => ({key, data}));\n      console.log(wordFrequencyData);\n      return wordFrequencyData;\n  }\n\n  render() {\n    const { barData } = this.state;\n\n    return (\n      <div>\n        <BarChart \n        data={barData}\n        // data={[\n        //   {key: \"A\", data: 1},\n        //   {key: \"B\", data: 2}\n        // ]}\n        height={300}\n        width={300}\n        />\n        Barchart here! \n      </div>\n    )\n  }\n}\n\nexport default Barchart;\n\n// export default function Barchart() {\n//     const [barData, setBarData] = useState([]);\n\n//     // const uploadData = new FormData(data.target);\n//     // const backendUrl = \"http://localhost:8080\"; // change to whatever\n//     // axios.get(`${backendUrl}/api/feedback`)\n//     //   .then((res) => {\n//     //     setSubmitted(res);\n//     //   })\n//     //   .catch((error) => {\n//     //     setError(error);\n//     //     console.log(error)\n//     //   });\n//     function calculateOccurrence(data) {\n//       let wordFreq = [];\n//       let allWords = {};\n//       for (let i=0; i < data.length; i++) {\n//         var words = data[i].user_query.split(\" \")\n//         for (let j=0; j < words.length; j++) {\n//           if (!(words[j] in allWords)) {\n//             allWords[words[j]] = 1\n//           } else {\n//             allWords[words[j]] += 1\n//           }\n//         }\n//       }\n//       for (var word in allWords) {\n//         wordFreq.push([word, allWords[word]])\n//       }\n//       wordFreq = wordFreq.sort((a, b) => b[1] - a[1]);\n//       // let wordFrequencyData = [];\n//       // for (let i=0; i < wordFreq.length; i++) {\n//       //   wordFrequencyData.push({ key: wordFreq[i][0], data: wordFreq[i][1] });\n//       // // var wordFreq = wordFrequencyData.map(([key, data]) => ({key, data}));\n//       // }\n//       var wordFrequencyData = wordFreq.map(([key, data]) => ({key, data}));\n//       console.log(wordFrequencyData);\n//       return wordFrequencyData;\n//     };\n\n//     useEffect(() => {\n//         let isMounted = true;\n//         fetch(\"http://localhost:8080/api/feedback\", {\n//           method: \"GET\"\n//         })\n//         .then(res => res.json())\n//         .then(data => {\n//           if (isMounted) setBarData(calculateOccurrence(data));\n//           // setBarData(calculateOccurrence(data).map(([key, data]) => ({key, data})))\n//         });\n//         return () => { isMounted = false};\n//       // async function getFeedback() {\n//         //   let res = await fetch(\"http://localhost:8080/api/feedback\");\n//         //   res = await res.json();\n//         //   setBarData(barData => ([...barData, calculateOccurrence(res)])); \n//         //   console.log(barData); \n//         // };\n\n//         // getFeedback();\n//     }, []);\n\n//     return (\n//       <div>\n//         <BarChart \n//         data={barData}\n//         // data={[\n//         //   {key: \"A\", data: 1},\n//         //   {key: \"B\", data: 2}\n//         // ]}\n//         height={300}\n//         width={300}\n//         />\n//         Barchart here! \n//       </div>\n//     )\n// }"]},"metadata":{},"sourceType":"module"}