{"ast":null,"code":"var _jsxFileName = \"/Users/xuehui/Desktop/NUS_Stuff/AY2122.1_Y4S1/Capstone/lta-visualization/frontend/src/components/Barchart.js\";\nimport { Component } from 'react'; // import { useState, useEffect } from 'react';\n\nimport { BarChart } from 'recharts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Barchart extends Component {\n  constructor(props) {\n    super(props);\n\n    this.loadData = async () => {\n      let response = await fetch(\"http://localhost:8080/api/feedback\", {\n        method: \"GET\"\n      });\n      let data = await response.json(); // let wordFreq = [];\n      // let allWords = {};\n      // for (let i=0; i < data.length; i++) {\n      //   var words = data[i].user_query.split(\" \")\n      //   for (let j=0; j < words.length; j++) {\n      //     if (!(words[j] in allWords)) {\n      //       allWords[words[j]] = 1\n      //     } else {\n      //       allWords[words[j]] += 1\n      //     }\n      //   }\n      // }\n      // for (var word in allWords) {\n      //   wordFreq.push([word, allWords[word]])\n      // }\n      // wordFreq = wordFreq.sort((a, b) => b[1] - a[1]);\n      // let wordFrequency = []\n      // for (let i=0; i < wordFreq.length; i++) {\n      //   wordFrequency.push({ key: wordFreq[i][0], data: wordFreq[i][1]} );\n      // }\n      // wordFreq.map(([key, data]) => ({key, data}));\n      // console.log(wordFrequency);\n\n      console.log(data);\n      await this.setState({\n        barData: data,\n        loaded: true\n      });\n      console.log(this.state.barData); // return wordFrequencyData;\n    };\n\n    this.loadData = this.loadData.bind(this);\n    this.state = {\n      loaded: false,\n      barData: []\n    };\n  }\n\n  async componentDidMount() {\n    if (!this.state.loaded) {\n      await this.loadData();\n    } // await this.setState({\n    //   barData: data\n    // });\n    // console.log(data);\n    // await this.calculateOccurrence(data);\n    // if (this.state.loaded === false) {\n    //   await this.setState({\n    //     loaded: true,\n    //     barData: data\n    //   });\n    // }\n    // setBarData(calculateOccurrence(data).map(([key, data]) => ({key, data})))\n\n  }\n\n  render() {\n    const {\n      barData\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(BarChart // data={barData.map(([key, data]) => ({key, data}))}\n      , {\n        data: barData // data={[\n        //   {key: \"A\", data: 1},\n        //   {key: \"B\", data: 2}\n        // ]}\n        ,\n        height: 300,\n        width: 300\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), \"Barchart here!\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Barchart; // export default function Barchart() {\n//     const [barData, setBarData] = useState([]);\n//     // const uploadData = new FormData(data.target);\n//     // const backendUrl = \"http://localhost:8080\"; // change to whatever\n//     // axios.get(`${backendUrl}/api/feedback`)\n//     //   .then((res) => {\n//     //     setSubmitted(res);\n//     //   })\n//     //   .catch((error) => {\n//     //     setError(error);\n//     //     console.log(error)\n//     //   });\n//     function calculateOccurrence(data) {\n//       let wordFreq = [];\n//       let allWords = {};\n//       for (let i=0; i < data.length; i++) {\n//         var words = data[i].user_query.split(\" \")\n//         for (let j=0; j < words.length; j++) {\n//           if (!(words[j] in allWords)) {\n//             allWords[words[j]] = 1\n//           } else {\n//             allWords[words[j]] += 1\n//           }\n//         }\n//       }\n//       for (var word in allWords) {\n//         wordFreq.push([word, allWords[word]])\n//       }\n//       wordFreq = wordFreq.sort((a, b) => b[1] - a[1]);\n//       // let wordFrequencyData = [];\n//       // for (let i=0; i < wordFreq.length; i++) {\n//       //   wordFrequencyData.push({ key: wordFreq[i][0], data: wordFreq[i][1] });\n//       // // var wordFreq = wordFrequencyData.map(([key, data]) => ({key, data}));\n//       // }\n//       var wordFrequencyData = wordFreq.map(([key, data]) => ({key, data}));\n//       console.log(wordFrequencyData);\n//       return wordFrequencyData;\n//     };\n//     useEffect(() => {\n//         let isMounted = true;\n//         fetch(\"http://localhost:8080/api/feedback\", {\n//           method: \"GET\"\n//         })\n//         .then(res => res.json())\n//         .then(data => {\n//           if (isMounted) setBarData(calculateOccurrence(data));\n//           // setBarData(calculateOccurrence(data).map(([key, data]) => ({key, data})))\n//         });\n//         return () => { isMounted = false};\n//       // async function getFeedback() {\n//         //   let res = await fetch(\"http://localhost:8080/api/feedback\");\n//         //   res = await res.json();\n//         //   setBarData(barData => ([...barData, calculateOccurrence(res)])); \n//         //   console.log(barData); \n//         // };\n//         // getFeedback();\n//     }, []);\n//     return (\n//       <div>\n//         <BarChart \n//         data={barData}\n//         // data={[\n//         //   {key: \"A\", data: 1},\n//         //   {key: \"B\", data: 2}\n//         // ]}\n//         height={300}\n//         width={300}\n//         />\n//         Barchart here! \n//       </div>\n//     )\n// }","map":{"version":3,"sources":["/Users/xuehui/Desktop/NUS_Stuff/AY2122.1_Y4S1/Capstone/lta-visualization/frontend/src/components/Barchart.js"],"names":["Component","BarChart","Barchart","constructor","props","loadData","response","fetch","method","data","json","console","log","setState","barData","loaded","state","bind","componentDidMount","render"],"mappings":";AAAA,SAASA,SAAT,QAA0B,OAA1B,C,CACA;;AACA,SAASC,QAAT,QAAyB,UAAzB;;;AAEA,MAAMC,QAAN,SAAuBF,SAAvB,CAAiC;AAC/BG,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SA4BnBC,QA5BmB,GA4BR,YAAY;AACrB,UAAIC,QAAQ,GAAG,MAAMC,KAAK,CAAC,oCAAD,EAAuC;AAC/DC,QAAAA,MAAM,EAAE;AADuD,OAAvC,CAA1B;AAIA,UAAIC,IAAI,GAAG,MAAMH,QAAQ,CAACI,IAAT,EAAjB,CALqB,CAMnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AACA,YAAM,KAAKI,QAAL,CAAc;AAClBC,QAAAA,OAAO,EAAEL,IADS;AAElBM,QAAAA,MAAM,EAAE;AAFU,OAAd,CAAN;AAIAJ,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKI,KAAL,CAAWF,OAAvB,EAlCmB,CAmCnB;AACH,KAhEkB;;AAEjB,SAAKT,QAAL,GAAgB,KAAKA,QAAL,CAAcY,IAAd,CAAmB,IAAnB,CAAhB;AACA,SAAKD,KAAL,GAAa;AACXD,MAAAA,MAAM,EAAE,KADG;AAEXD,MAAAA,OAAO,EAAE;AAFE,KAAb;AAID;;AAEsB,QAAjBI,iBAAiB,GAAG;AACxB,QAAI,CAAE,KAAKF,KAAL,CAAWD,MAAjB,EAA0B;AACxB,YAAM,KAAKV,QAAL,EAAN;AACD,KAHuB,CAKxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACD;;AAwCDc,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEL,MAAAA;AAAF,QAAc,KAAKE,KAAzB;AAEA,wBACE;AAAA,8BACE,QAAC,QAAD,CACA;AADA;AAEA,QAAA,IAAI,EAAEF,OAFN,CAGA;AACA;AACA;AACA;AANA;AAOA,QAAA,MAAM,EAAE,GAPR;AAQA,QAAA,KAAK,EAAE;AARP;AAAA;AAAA;AAAA;AAAA,cADF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAeD;;AArF8B;;AAwFjC,eAAeZ,QAAf,C,CAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { Component } from 'react';\n// import { useState, useEffect } from 'react';\nimport { BarChart } from 'recharts';\n\nclass Barchart extends Component {\n  constructor(props) {\n    super(props);\n    this.loadData = this.loadData.bind(this);\n    this.state = {\n      loaded: false,\n      barData: []\n    }\n  }\n\n  async componentDidMount() {\n    if (!(this.state.loaded)) {\n      await this.loadData();\n    }\n\n    // await this.setState({\n    //   barData: data\n    // });\n    // console.log(data);\n    // await this.calculateOccurrence(data);\n    // if (this.state.loaded === false) {\n    //   await this.setState({\n    //     loaded: true,\n    //     barData: data\n    //   });\n    // }\n    // setBarData(calculateOccurrence(data).map(([key, data]) => ({key, data})))\n  }\n\n  loadData = async () => { \n    let response = await fetch(\"http://localhost:8080/api/feedback\", {\n      method: \"GET\"\n    });\n\n    let data = await response.json();\n      // let wordFreq = [];\n      // let allWords = {};\n      // for (let i=0; i < data.length; i++) {\n      //   var words = data[i].user_query.split(\" \")\n      //   for (let j=0; j < words.length; j++) {\n      //     if (!(words[j] in allWords)) {\n      //       allWords[words[j]] = 1\n      //     } else {\n      //       allWords[words[j]] += 1\n      //     }\n      //   }\n      // }\n      // for (var word in allWords) {\n      //   wordFreq.push([word, allWords[word]])\n      // }\n      // wordFreq = wordFreq.sort((a, b) => b[1] - a[1]);\n\n      // let wordFrequency = []\n      // for (let i=0; i < wordFreq.length; i++) {\n      //   wordFrequency.push({ key: wordFreq[i][0], data: wordFreq[i][1]} );\n      // }\n      // wordFreq.map(([key, data]) => ({key, data}));\n      // console.log(wordFrequency);\n      console.log(data)\n      await this.setState({\n        barData: data,\n        loaded: true\n      });\n      console.log(this.state.barData)\n      // return wordFrequencyData;\n  }\n\n  render() {\n    const { barData } = this.state;\n\n    return (\n      <div>\n        <BarChart \n        // data={barData.map(([key, data]) => ({key, data}))}\n        data={barData}\n        // data={[\n        //   {key: \"A\", data: 1},\n        //   {key: \"B\", data: 2}\n        // ]}\n        height={300}\n        width={300}\n        />\n        Barchart here! \n      </div>\n    )\n  }\n}\n\nexport default Barchart;\n\n// export default function Barchart() {\n//     const [barData, setBarData] = useState([]);\n\n//     // const uploadData = new FormData(data.target);\n//     // const backendUrl = \"http://localhost:8080\"; // change to whatever\n//     // axios.get(`${backendUrl}/api/feedback`)\n//     //   .then((res) => {\n//     //     setSubmitted(res);\n//     //   })\n//     //   .catch((error) => {\n//     //     setError(error);\n//     //     console.log(error)\n//     //   });\n//     function calculateOccurrence(data) {\n//       let wordFreq = [];\n//       let allWords = {};\n//       for (let i=0; i < data.length; i++) {\n//         var words = data[i].user_query.split(\" \")\n//         for (let j=0; j < words.length; j++) {\n//           if (!(words[j] in allWords)) {\n//             allWords[words[j]] = 1\n//           } else {\n//             allWords[words[j]] += 1\n//           }\n//         }\n//       }\n//       for (var word in allWords) {\n//         wordFreq.push([word, allWords[word]])\n//       }\n//       wordFreq = wordFreq.sort((a, b) => b[1] - a[1]);\n//       // let wordFrequencyData = [];\n//       // for (let i=0; i < wordFreq.length; i++) {\n//       //   wordFrequencyData.push({ key: wordFreq[i][0], data: wordFreq[i][1] });\n//       // // var wordFreq = wordFrequencyData.map(([key, data]) => ({key, data}));\n//       // }\n//       var wordFrequencyData = wordFreq.map(([key, data]) => ({key, data}));\n//       console.log(wordFrequencyData);\n//       return wordFrequencyData;\n//     };\n\n//     useEffect(() => {\n//         let isMounted = true;\n//         fetch(\"http://localhost:8080/api/feedback\", {\n//           method: \"GET\"\n//         })\n//         .then(res => res.json())\n//         .then(data => {\n//           if (isMounted) setBarData(calculateOccurrence(data));\n//           // setBarData(calculateOccurrence(data).map(([key, data]) => ({key, data})))\n//         });\n//         return () => { isMounted = false};\n//       // async function getFeedback() {\n//         //   let res = await fetch(\"http://localhost:8080/api/feedback\");\n//         //   res = await res.json();\n//         //   setBarData(barData => ([...barData, calculateOccurrence(res)])); \n//         //   console.log(barData); \n//         // };\n\n//         // getFeedback();\n//     }, []);\n\n//     return (\n//       <div>\n//         <BarChart \n//         data={barData}\n//         // data={[\n//         //   {key: \"A\", data: 1},\n//         //   {key: \"B\", data: 2}\n//         // ]}\n//         height={300}\n//         width={300}\n//         />\n//         Barchart here! \n//       </div>\n//     )\n// }"]},"metadata":{},"sourceType":"module"}