{"ast":null,"code":"function isPrimitive(value) {\n  return typeof value !== 'object' && typeof value !== 'function' || value === null;\n}\n\nfunction MapTree() {\n  this.childBranches = new WeakMap();\n  this.primitiveKeys = new Map();\n  this.hasValue = false;\n  this.value = undefined;\n}\n\nMapTree.prototype.has = function has(key) {\n  var keyObject = isPrimitive(key) ? this.primitiveKeys.get(key) : key;\n  return keyObject ? this.childBranches.has(keyObject) : false;\n};\n\nMapTree.prototype.get = function get(key) {\n  var keyObject = isPrimitive(key) ? this.primitiveKeys.get(key) : key;\n  return keyObject ? this.childBranches.get(keyObject) : undefined;\n};\n\nMapTree.prototype.resolveBranch = function resolveBranch(key) {\n  if (this.has(key)) {\n    return this.get(key);\n  }\n\n  var newBranch = new MapTree();\n  var keyObject = this.createKey(key);\n  this.childBranches.set(keyObject, newBranch);\n  return newBranch;\n};\n\nMapTree.prototype.setValue = function setValue(value) {\n  this.hasValue = true;\n  return this.value = value;\n};\n\nMapTree.prototype.createKey = function createKey(key) {\n  if (isPrimitive(key)) {\n    var keyObject = {};\n    this.primitiveKeys.set(key, keyObject);\n    return keyObject;\n  }\n\n  return key;\n};\n\nMapTree.prototype.clear = function clear() {\n  if (arguments.length === 0) {\n    this.childBranches = new WeakMap();\n    this.primitiveKeys.clear();\n    this.hasValue = false;\n    this.value = undefined;\n  } else if (arguments.length === 1) {\n    var key = arguments[0];\n\n    if (isPrimitive(key)) {\n      var keyObject = this.primitiveKeys.get(key);\n\n      if (keyObject) {\n        this.childBranches.delete(keyObject);\n        this.primitiveKeys.delete(key);\n      }\n    } else {\n      this.childBranches.delete(key);\n    }\n  } else {\n    var childKey = arguments[0];\n\n    if (this.has(childKey)) {\n      var childBranch = this.get(childKey);\n      childBranch.clear.apply(childBranch, Array.prototype.slice.call(arguments, 1));\n    }\n  }\n};\n\nmodule.exports = function memoize(fn) {\n  var argsTree = new MapTree();\n\n  function memoized() {\n    var args = Array.prototype.slice.call(arguments);\n    var argNode = args.reduce(function getBranch(parentBranch, arg) {\n      return parentBranch.resolveBranch(arg);\n    }, argsTree);\n\n    if (argNode.hasValue) {\n      return argNode.value;\n    }\n\n    var value = fn.apply(null, args);\n    return argNode.setValue(value);\n  }\n\n  memoized.clear = argsTree.clear.bind(argsTree);\n  return memoized;\n};","map":{"version":3,"sources":["/Users/xuehui/Desktop/NUS_Stuff/AY2122.1_Y4S1/Capstone/lta-visualization/frontend/node_modules/memoize-weak/lib/memoize.js"],"names":["isPrimitive","value","MapTree","childBranches","WeakMap","primitiveKeys","Map","hasValue","undefined","prototype","has","key","keyObject","get","resolveBranch","newBranch","createKey","set","setValue","clear","arguments","length","delete","childKey","childBranch","apply","Array","slice","call","module","exports","memoize","fn","argsTree","memoized","args","argNode","reduce","getBranch","parentBranch","arg","bind"],"mappings":"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","sourcesContent":["function isPrimitive(value) {\n  return ((typeof value !== 'object') && (typeof value !== 'function')) || (value === null);\n}\n\nfunction MapTree() {\n  this.childBranches = new WeakMap();\n  this.primitiveKeys = new Map();\n  this.hasValue = false;\n  this.value = undefined;\n}\n\nMapTree.prototype.has = function has(key) {\n  var keyObject = (isPrimitive(key) ? this.primitiveKeys.get(key) : key);\n  return (keyObject ? this.childBranches.has(keyObject) : false);\n};\n\nMapTree.prototype.get = function get(key) {\n  var keyObject = (isPrimitive(key) ? this.primitiveKeys.get(key) : key);\n  return (keyObject ? this.childBranches.get(keyObject) : undefined);\n};\n\nMapTree.prototype.resolveBranch = function resolveBranch(key) {\n  if (this.has(key)) { return this.get(key); }\n  var newBranch = new MapTree();\n  var keyObject = this.createKey(key);\n  this.childBranches.set(keyObject, newBranch);\n  return newBranch;\n};\n\nMapTree.prototype.setValue = function setValue(value) {\n  this.hasValue = true;\n  return (this.value = value);\n};\n\nMapTree.prototype.createKey = function createKey(key) {\n  if (isPrimitive(key)) {\n    var keyObject = {};\n    this.primitiveKeys.set(key, keyObject);\n    return keyObject;\n  }\n  return key;\n};\n\nMapTree.prototype.clear = function clear() {\n  if (arguments.length === 0) {\n    this.childBranches = new WeakMap();\n    this.primitiveKeys.clear();\n    this.hasValue = false;\n    this.value = undefined;\n  } else if (arguments.length === 1) {\n    var key = arguments[0];\n    if (isPrimitive(key)) {\n      var keyObject = this.primitiveKeys.get(key);\n      if (keyObject) {\n        this.childBranches.delete(keyObject);\n        this.primitiveKeys.delete(key);\n      }\n    } else {\n      this.childBranches.delete(key);\n    }\n  } else {\n    var childKey = arguments[0];\n    if (this.has(childKey)) {\n      var childBranch = this.get(childKey);\n      childBranch.clear.apply(childBranch, Array.prototype.slice.call(arguments, 1));\n    }\n  }\n};\n\nmodule.exports = function memoize(fn) {\n  var argsTree = new MapTree();\n\n  function memoized() {\n    var args = Array.prototype.slice.call(arguments);\n    var argNode = args.reduce(function getBranch(parentBranch, arg) {\n      return parentBranch.resolveBranch(arg);\n    }, argsTree);\n    if (argNode.hasValue) { return argNode.value; }\n    var value = fn.apply(null, args);\n    return argNode.setValue(value);\n  }\n\n  memoized.clear = argsTree.clear.bind(argsTree);\n\n  return memoized;\n};\n"]},"metadata":{},"sourceType":"script"}