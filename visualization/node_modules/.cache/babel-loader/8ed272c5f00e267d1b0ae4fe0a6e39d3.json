{"ast":null,"code":"var _jsxFileName = \"/Users/xuehui/Desktop/NUS_Stuff/AY2122.1_Y4S1/Capstone/lta-visualization/frontend/src/components/Barchart.js\";\nimport { Component } from \"react\";\nimport { BarChart, CartesianGrid, XAxis, YAxis, Tooltip, Bar, Legend } from \"recharts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Barchart extends Component {\n  constructor(props) {\n    super(props); // this.loadData = this.loadData.bind(this);\n\n    this.state = {\n      barData: []\n    };\n  }\n\n  async componentDidMount() {\n    let response = await fetch(\"http://localhost:8080/api/feedback\", {\n      method: \"GET\"\n    });\n    let data = await response.json();\n    let wordFreq = [];\n    let allWords = {};\n\n    for (let i = 0; i < data.length; i++) {\n      var words = data[i].user_query.split(\" \");\n\n      for (let j = 0; j < words.length; j++) {\n        let word = words[j].toLowerCase();\n\n        if (!(word in allWords)) {\n          allWords[word] = 1;\n        } else {\n          allWords[word] += 1;\n        }\n      }\n    }\n\n    for (var word in allWords) {\n      wordFreq.push([word, allWords[word]]);\n    }\n\n    wordFreq = wordFreq.sort((a, b) => b[1] - a[1]);\n    wordFreq = wordFreq.map(_ref => {\n      let [word, count] = _ref;\n      return {\n        word,\n        count\n      };\n    });\n    await this.setState({\n      barData: wordFreq,\n      loaded: true\n    });\n    console.log(this.state.barData); // return wordFrequencyData;\n  }\n\n  render() {\n    const {\n      barData\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(BarChart, {\n        data: barData,\n        height: 300,\n        width: 1000 // margin={{\n        //   top: 5,\n        //   right: 30,\n        //   left: 20,\n        //   bottom: 5,\n        // }}\n        ,\n        children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n          strokeDasharray: \"3 3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n          dataKey: \"word\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Bar, {\n          dataKey: \"word\",\n          fill: \"#8884d8\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Bar, {\n          dataKey: \"count\",\n          fill: \"#8884d8\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Barchart;","map":{"version":3,"sources":["/Users/xuehui/Desktop/NUS_Stuff/AY2122.1_Y4S1/Capstone/lta-visualization/frontend/src/components/Barchart.js"],"names":["Component","BarChart","CartesianGrid","XAxis","YAxis","Tooltip","Bar","Legend","Barchart","constructor","props","state","barData","componentDidMount","response","fetch","method","data","json","wordFreq","allWords","i","length","words","user_query","split","j","word","toLowerCase","push","sort","a","b","map","count","setState","loaded","console","log","render"],"mappings":"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","sourcesContent":["import { Component } from \"react\";\nimport {\n  BarChart,\n  CartesianGrid,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Bar,\n  Legend,\n} from \"recharts\";\n\nclass Barchart extends Component {\n  constructor(props) {\n    super(props);\n    // this.loadData = this.loadData.bind(this);\n    this.state = {\n      barData: [],\n    };\n  }\n\n  async componentDidMount() {\n    let response = await fetch(\"http://localhost:8080/api/feedback\", {\n      method: \"GET\",\n    });\n\n    let data = await response.json();\n    let wordFreq = [];\n    let allWords = {};\n    for (let i = 0; i < data.length; i++) {\n      var words = data[i].user_query.split(\" \");\n      for (let j = 0; j < words.length; j++) {\n        let word = words[j].toLowerCase();\n        if (!(word in allWords)) {\n          allWords[word] = 1;\n        } else {\n          allWords[word] += 1;\n        }\n      }\n    }\n    for (var word in allWords) {\n      wordFreq.push([word, allWords[word]]);\n    }\n    wordFreq = wordFreq.sort((a, b) => b[1] - a[1]);\n    wordFreq = wordFreq.map(([word, count]) => ({ word, count }));\n    await this.setState({\n      barData: wordFreq,\n      loaded: true,\n    });\n    console.log(this.state.barData);\n    // return wordFrequencyData;\n  };\n\n  render() {\n    const { barData } = this.state;\n\n    return (\n      <div>\n        <BarChart\n          data={barData}\n          height={300}\n          width={1000}\n          // margin={{\n          //   top: 5,\n          //   right: 30,\n          //   left: 20,\n          //   bottom: 5,\n          // }}\n        >\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis dataKey=\"word\" />\n          <YAxis />\n          <Tooltip />\n          <Legend />\n          <Bar dataKey=\"word\" fill=\"#8884d8\" />\n          <Bar dataKey=\"count\" fill=\"#8884d8\" />\n        </BarChart>\n      </div>\n    );\n  }\n}\n\nexport default Barchart;"]},"metadata":{},"sourceType":"module"}