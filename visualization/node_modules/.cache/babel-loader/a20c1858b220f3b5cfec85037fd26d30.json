{"ast":null,"code":"var _jsxFileName = \"/Users/xuehui/Desktop/NUS_Stuff/AY2122.1_Y4S1/Capstone/lta-visualization/frontend/src/components/Barchart.js\";\nimport { Component } from 'react'; // import { useState, useEffect } from 'react';\n\nimport { BarChart } from 'reaviz';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Barchart extends Component {\n  constructor(props) {\n    super(props);\n\n    this.calculateOccurrence = async data => {\n      let wordFreq = [];\n      let allWords = {};\n\n      for (let i = 0; i < data.length; i++) {\n        var words = data[i].user_query.split(\" \");\n\n        for (let j = 0; j < words.length; j++) {\n          if (!(words[j] in allWords)) {\n            allWords[words[j]] = 1;\n          } else {\n            allWords[words[j]] += 1;\n          }\n        }\n      }\n\n      for (var word in allWords) {\n        wordFreq.push([word, allWords[word]]);\n      }\n\n      wordFreq = wordFreq.sort((a, b) => b[1] - a[1]);\n      let wordFrequency = [];\n\n      for (let i = 0; i < wordFreq.length; i++) {\n        wordFrequency.push({\n          key: wordFreq[i][0],\n          data: wordFreq[i][1]\n        });\n      } // wordFreq.map(([key, data]) => ({key, data}));\n\n\n      console.log(wordFrequency);\n      await this.setState({\n        barData: wordFrequency\n      }); // return wordFrequencyData;\n    };\n\n    this.calculateOccurrence = this.calculateOccurrence.bind(this);\n    this.state = {\n      loaded: false,\n      barData: []\n    };\n  }\n\n  async componentDidMount() {\n    let response = await fetch(\"http://localhost:8080/api/feedback\", {\n      method: \"GET\"\n    });\n    let data = await response.json();\n    await this.setState({\n      barData: data\n    }); // console.log(data);\n    // await this.calculateOccurrence(data);\n    // if (this.state.loaded === false) {\n    //   await this.setState({\n    //     loaded: true,\n    //     barData: data\n    //   });\n    // }\n    // setBarData(calculateOccurrence(data).map(([key, data]) => ({key, data})))\n  }\n\n  render() {\n    const {\n      barData\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(BarChart // data={barData.map(([key, data]) => ({key, data}))}\n      , {\n        data: barData // data={[\n        //   {key: \"A\", data: 1},\n        //   {key: \"B\", data: 2}\n        // ]}\n        ,\n        height: 300,\n        width: 300\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), \"Barchart here!\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Barchart; // export default function Barchart() {\n//     const [barData, setBarData] = useState([]);\n//     // const uploadData = new FormData(data.target);\n//     // const backendUrl = \"http://localhost:8080\"; // change to whatever\n//     // axios.get(`${backendUrl}/api/feedback`)\n//     //   .then((res) => {\n//     //     setSubmitted(res);\n//     //   })\n//     //   .catch((error) => {\n//     //     setError(error);\n//     //     console.log(error)\n//     //   });\n//     function calculateOccurrence(data) {\n//       let wordFreq = [];\n//       let allWords = {};\n//       for (let i=0; i < data.length; i++) {\n//         var words = data[i].user_query.split(\" \")\n//         for (let j=0; j < words.length; j++) {\n//           if (!(words[j] in allWords)) {\n//             allWords[words[j]] = 1\n//           } else {\n//             allWords[words[j]] += 1\n//           }\n//         }\n//       }\n//       for (var word in allWords) {\n//         wordFreq.push([word, allWords[word]])\n//       }\n//       wordFreq = wordFreq.sort((a, b) => b[1] - a[1]);\n//       // let wordFrequencyData = [];\n//       // for (let i=0; i < wordFreq.length; i++) {\n//       //   wordFrequencyData.push({ key: wordFreq[i][0], data: wordFreq[i][1] });\n//       // // var wordFreq = wordFrequencyData.map(([key, data]) => ({key, data}));\n//       // }\n//       var wordFrequencyData = wordFreq.map(([key, data]) => ({key, data}));\n//       console.log(wordFrequencyData);\n//       return wordFrequencyData;\n//     };\n//     useEffect(() => {\n//         let isMounted = true;\n//         fetch(\"http://localhost:8080/api/feedback\", {\n//           method: \"GET\"\n//         })\n//         .then(res => res.json())\n//         .then(data => {\n//           if (isMounted) setBarData(calculateOccurrence(data));\n//           // setBarData(calculateOccurrence(data).map(([key, data]) => ({key, data})))\n//         });\n//         return () => { isMounted = false};\n//       // async function getFeedback() {\n//         //   let res = await fetch(\"http://localhost:8080/api/feedback\");\n//         //   res = await res.json();\n//         //   setBarData(barData => ([...barData, calculateOccurrence(res)])); \n//         //   console.log(barData); \n//         // };\n//         // getFeedback();\n//     }, []);\n//     return (\n//       <div>\n//         <BarChart \n//         data={barData}\n//         // data={[\n//         //   {key: \"A\", data: 1},\n//         //   {key: \"B\", data: 2}\n//         // ]}\n//         height={300}\n//         width={300}\n//         />\n//         Barchart here! \n//       </div>\n//     )\n// }","map":{"version":3,"sources":["/Users/xuehui/Desktop/NUS_Stuff/AY2122.1_Y4S1/Capstone/lta-visualization/frontend/src/components/Barchart.js"],"names":["Component","BarChart","Barchart","constructor","props","calculateOccurrence","data","wordFreq","allWords","i","length","words","user_query","split","j","word","push","sort","a","b","wordFrequency","key","console","log","setState","barData","bind","state","loaded","componentDidMount","response","fetch","method","json","render"],"mappings":";AAAA,SAASA,SAAT,QAA0B,OAA1B,C,CACA;;AACA,SAASC,QAAT,QAAyB,QAAzB;;;AAEA,MAAMC,QAAN,SAAuBF,SAAvB,CAAiC;AAC/BG,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SA6BnBC,mBA7BmB,GA6BG,MAAOC,IAAP,IAAgB;AAClC,UAAIC,QAAQ,GAAG,EAAf;AACA,UAAIC,QAAQ,GAAG,EAAf;;AACA,WAAK,IAAIC,CAAC,GAAC,CAAX,EAAcA,CAAC,GAAGH,IAAI,CAACI,MAAvB,EAA+BD,CAAC,EAAhC,EAAoC;AAClC,YAAIE,KAAK,GAAGL,IAAI,CAACG,CAAD,CAAJ,CAAQG,UAAR,CAAmBC,KAAnB,CAAyB,GAAzB,CAAZ;;AACA,aAAK,IAAIC,CAAC,GAAC,CAAX,EAAcA,CAAC,GAAGH,KAAK,CAACD,MAAxB,EAAgCI,CAAC,EAAjC,EAAqC;AACnC,cAAI,EAAEH,KAAK,CAACG,CAAD,CAAL,IAAYN,QAAd,CAAJ,EAA6B;AAC3BA,YAAAA,QAAQ,CAACG,KAAK,CAACG,CAAD,CAAN,CAAR,GAAqB,CAArB;AACD,WAFD,MAEO;AACLN,YAAAA,QAAQ,CAACG,KAAK,CAACG,CAAD,CAAN,CAAR,IAAsB,CAAtB;AACD;AACF;AACF;;AACD,WAAK,IAAIC,IAAT,IAAiBP,QAAjB,EAA2B;AACzBD,QAAAA,QAAQ,CAACS,IAAT,CAAc,CAACD,IAAD,EAAOP,QAAQ,CAACO,IAAD,CAAf,CAAd;AACD;;AACDR,MAAAA,QAAQ,GAAGA,QAAQ,CAACU,IAAT,CAAc,CAACC,CAAD,EAAIC,CAAJ,KAAUA,CAAC,CAAC,CAAD,CAAD,GAAOD,CAAC,CAAC,CAAD,CAAhC,CAAX;AAEA,UAAIE,aAAa,GAAG,EAApB;;AACA,WAAK,IAAIX,CAAC,GAAC,CAAX,EAAcA,CAAC,GAAGF,QAAQ,CAACG,MAA3B,EAAmCD,CAAC,EAApC,EAAwC;AACtCW,QAAAA,aAAa,CAACJ,IAAd,CAAmB;AAAEK,UAAAA,GAAG,EAAEd,QAAQ,CAACE,CAAD,CAAR,CAAY,CAAZ,CAAP;AAAuBH,UAAAA,IAAI,EAAEC,QAAQ,CAACE,CAAD,CAAR,CAAY,CAAZ;AAA7B,SAAnB;AACD,OArBiC,CAsBlC;;;AACAa,MAAAA,OAAO,CAACC,GAAR,CAAYH,aAAZ;AACA,YAAM,KAAKI,QAAL,CAAc;AAClBC,QAAAA,OAAO,EAAEL;AADS,OAAd,CAAN,CAxBkC,CA2BlC;AACH,KAzDkB;;AAEjB,SAAKf,mBAAL,GAA2B,KAAKA,mBAAL,CAAyBqB,IAAzB,CAA8B,IAA9B,CAA3B;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,MAAM,EAAE,KADG;AAEXH,MAAAA,OAAO,EAAE;AAFE,KAAb;AAID;;AAEsB,QAAjBI,iBAAiB,GAAG;AACxB,QAAIC,QAAQ,GAAG,MAAMC,KAAK,CAAC,oCAAD,EAAuC;AAC/DC,MAAAA,MAAM,EAAE;AADuD,KAAvC,CAA1B;AAIA,QAAI1B,IAAI,GAAG,MAAMwB,QAAQ,CAACG,IAAT,EAAjB;AACA,UAAM,KAAKT,QAAL,CAAc;AAClBC,MAAAA,OAAO,EAAEnB;AADS,KAAd,CAAN,CANwB,CASxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD;;AAgCD4B,EAAAA,MAAM,GAAG;AACP,UAAM;AAAET,MAAAA;AAAF,QAAc,KAAKE,KAAzB;AAEA,wBACE;AAAA,8BACE,QAAC,QAAD,CACA;AADA;AAEA,QAAA,IAAI,EAAEF,OAFN,CAGA;AACA;AACA;AACA;AANA;AAOA,QAAA,MAAM,EAAE,GAPR;AAQA,QAAA,KAAK,EAAE;AARP;AAAA;AAAA;AAAA;AAAA,cADF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAeD;;AA9E8B;;AAiFjC,eAAevB,QAAf,C,CAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { Component } from 'react';\n// import { useState, useEffect } from 'react';\nimport { BarChart } from 'reaviz';\n\nclass Barchart extends Component {\n  constructor(props) {\n    super(props);\n    this.calculateOccurrence = this.calculateOccurrence.bind(this);\n    this.state = {\n      loaded: false,\n      barData: []\n    }\n  }\n\n  async componentDidMount() {\n    let response = await fetch(\"http://localhost:8080/api/feedback\", {\n      method: \"GET\"\n    });\n\n    let data = await response.json();\n    await this.setState({\n      barData: data\n    });\n    // console.log(data);\n    // await this.calculateOccurrence(data);\n    // if (this.state.loaded === false) {\n    //   await this.setState({\n    //     loaded: true,\n    //     barData: data\n    //   });\n    // }\n    // setBarData(calculateOccurrence(data).map(([key, data]) => ({key, data})))\n  }\n\n  calculateOccurrence = async (data) => { \n      let wordFreq = [];\n      let allWords = {};\n      for (let i=0; i < data.length; i++) {\n        var words = data[i].user_query.split(\" \")\n        for (let j=0; j < words.length; j++) {\n          if (!(words[j] in allWords)) {\n            allWords[words[j]] = 1\n          } else {\n            allWords[words[j]] += 1\n          }\n        }\n      }\n      for (var word in allWords) {\n        wordFreq.push([word, allWords[word]])\n      }\n      wordFreq = wordFreq.sort((a, b) => b[1] - a[1]);\n\n      let wordFrequency = []\n      for (let i=0; i < wordFreq.length; i++) {\n        wordFrequency.push({ key: wordFreq[i][0], data: wordFreq[i][1]} );\n      }\n      // wordFreq.map(([key, data]) => ({key, data}));\n      console.log(wordFrequency);\n      await this.setState({\n        barData: wordFrequency\n      });\n      // return wordFrequencyData;\n  }\n\n  render() {\n    const { barData } = this.state;\n\n    return (\n      <div>\n        <BarChart \n        // data={barData.map(([key, data]) => ({key, data}))}\n        data={barData}\n        // data={[\n        //   {key: \"A\", data: 1},\n        //   {key: \"B\", data: 2}\n        // ]}\n        height={300}\n        width={300}\n        />\n        Barchart here! \n      </div>\n    )\n  }\n}\n\nexport default Barchart;\n\n// export default function Barchart() {\n//     const [barData, setBarData] = useState([]);\n\n//     // const uploadData = new FormData(data.target);\n//     // const backendUrl = \"http://localhost:8080\"; // change to whatever\n//     // axios.get(`${backendUrl}/api/feedback`)\n//     //   .then((res) => {\n//     //     setSubmitted(res);\n//     //   })\n//     //   .catch((error) => {\n//     //     setError(error);\n//     //     console.log(error)\n//     //   });\n//     function calculateOccurrence(data) {\n//       let wordFreq = [];\n//       let allWords = {};\n//       for (let i=0; i < data.length; i++) {\n//         var words = data[i].user_query.split(\" \")\n//         for (let j=0; j < words.length; j++) {\n//           if (!(words[j] in allWords)) {\n//             allWords[words[j]] = 1\n//           } else {\n//             allWords[words[j]] += 1\n//           }\n//         }\n//       }\n//       for (var word in allWords) {\n//         wordFreq.push([word, allWords[word]])\n//       }\n//       wordFreq = wordFreq.sort((a, b) => b[1] - a[1]);\n//       // let wordFrequencyData = [];\n//       // for (let i=0; i < wordFreq.length; i++) {\n//       //   wordFrequencyData.push({ key: wordFreq[i][0], data: wordFreq[i][1] });\n//       // // var wordFreq = wordFrequencyData.map(([key, data]) => ({key, data}));\n//       // }\n//       var wordFrequencyData = wordFreq.map(([key, data]) => ({key, data}));\n//       console.log(wordFrequencyData);\n//       return wordFrequencyData;\n//     };\n\n//     useEffect(() => {\n//         let isMounted = true;\n//         fetch(\"http://localhost:8080/api/feedback\", {\n//           method: \"GET\"\n//         })\n//         .then(res => res.json())\n//         .then(data => {\n//           if (isMounted) setBarData(calculateOccurrence(data));\n//           // setBarData(calculateOccurrence(data).map(([key, data]) => ({key, data})))\n//         });\n//         return () => { isMounted = false};\n//       // async function getFeedback() {\n//         //   let res = await fetch(\"http://localhost:8080/api/feedback\");\n//         //   res = await res.json();\n//         //   setBarData(barData => ([...barData, calculateOccurrence(res)])); \n//         //   console.log(barData); \n//         // };\n\n//         // getFeedback();\n//     }, []);\n\n//     return (\n//       <div>\n//         <BarChart \n//         data={barData}\n//         // data={[\n//         //   {key: \"A\", data: 1},\n//         //   {key: \"B\", data: 2}\n//         // ]}\n//         height={300}\n//         width={300}\n//         />\n//         Barchart here! \n//       </div>\n//     )\n// }"]},"metadata":{},"sourceType":"module"}