{"ast":null,"code":"var _jsxFileName = \"/Users/xuehui/Desktop/NUS_Stuff/AY2122.1_Y4S1/Capstone/LTA-chatbot/visualization/src/components/Wordcloud.js\";\nimport { Component } from \"react\";\nimport ReactWordcloud from \"react-wordcloud\";\nimport { url } from \"../config\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass Wordcloud extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      wordData: []\n    };\n  }\n\n  async componentDidMount() {\n    try {\n      let response = await fetch(`${url}/feedback`, {\n        method: \"GET\"\n      });\n      let data = await response.json(); // Obtaining frequency of words from user feedback\n\n      let wordFreq = [];\n      let allWords = {};\n\n      for (let i = 0; i < data.length; i++) {\n        if (data[i].feedback) {\n          var words = data[i].feedback.split(\" \");\n\n          for (let j = 0; j < words.length; j++) {\n            let word = words[j].toLowerCase();\n\n            if (word.match(/[a-z]/i)) {\n              if (!(word in allWords)) {\n                allWords[word] = 1;\n              } else {\n                allWords[word] += 1;\n              }\n            }\n          }\n        }\n      } // Sorting them in descending order of frequency\n\n\n      for (var word in allWords) {\n        wordFreq.push([word, allWords[word]]);\n      }\n\n      wordFreq = wordFreq.sort((a, b) => b[1] - a[1]);\n      wordFreq = wordFreq.map(_ref => {\n        let [text, value] = _ref;\n        return {\n          text,\n          value\n        };\n      });\n      await this.setState({\n        wordData: [] // wordData: wordFreq,\n\n      });\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  render() {\n    const {\n      wordData\n    } = this.state;\n    const sizes = [650, 300];\n    const options = {\n      fontFamily: \"Arial\",\n      fontSizes: [20, 50],\n      rotations: 2,\n      rotationAngles: [-90, 0]\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-title\",\n        children: /*#__PURE__*/_jsxDEV(\"strong\", {\n          className: \"title-name\",\n          children: \"Most Frequently Used Words in Feedbacks\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: wordData.length ? /*#__PURE__*/_jsxDEV(ReactWordcloud, {\n          words: wordData,\n          size: sizes,\n          options: options\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"title-name\",\n          children: \" There is no data yet! \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 15\n        }, this)\n      }, void 0, false)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Wordcloud;","map":{"version":3,"sources":["/Users/xuehui/Desktop/NUS_Stuff/AY2122.1_Y4S1/Capstone/LTA-chatbot/visualization/src/components/Wordcloud.js"],"names":["Component","ReactWordcloud","url","Wordcloud","constructor","props","state","wordData","componentDidMount","response","fetch","method","data","json","wordFreq","allWords","i","length","feedback","words","split","j","word","toLowerCase","match","push","sort","a","b","map","text","value","setState","err","console","log","render","sizes","options","fontFamily","fontSizes","rotations","rotationAngles"],"mappings":"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","sourcesContent":["import { Component } from \"react\";\nimport ReactWordcloud from \"react-wordcloud\";\nimport { url } from \"../config\";\n\nclass Wordcloud extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      wordData: [],\n    };\n  }\n\n  async componentDidMount() {\n    try {\n      let response = await fetch(`${url}/feedback`, {\n        method: \"GET\",\n      });\n\n      let data = await response.json();\n      // Obtaining frequency of words from user feedback\n      let wordFreq = [];\n      let allWords = {};\n      for (let i = 0; i < data.length; i++) {\n        if (data[i].feedback) {\n          var words = data[i].feedback.split(\" \");\n          for (let j = 0; j < words.length; j++) {\n            let word = words[j].toLowerCase();\n            if (word.match(/[a-z]/i)) {\n              if (!(word in allWords)) {\n                allWords[word] = 1;\n              } else {\n                allWords[word] += 1;\n              }\n            }\n          }\n        }\n      }\n      // Sorting them in descending order of frequency\n      for (var word in allWords) {\n        wordFreq.push([word, allWords[word]]);\n      }\n      wordFreq = wordFreq.sort((a, b) => b[1] - a[1]);\n      wordFreq = wordFreq.map(([text, value]) => ({ text, value }));\n      await this.setState({\n        wordData: [],\n        // wordData: wordFreq,\n      });\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  render() {\n    const { wordData } = this.state;\n    const sizes = [650, 300];\n    const options = {\n      fontFamily: \"Arial\",\n      fontSizes: [20, 50],\n      rotations: 2,\n      rotationAngles: [-90, 0],\n    };\n\n    return (\n      <div>\n        <div className=\"chart-title\">\n          <strong className=\"title-name\">\n            Most Frequently Used Words in Feedbacks\n          </strong>\n        </div>\n        <>\n        {wordData.length ? (\n          <ReactWordcloud words={wordData} size={sizes} options={options} />\n\n        ) : ( <div className=\"title-name\"> There is no data yet! </div> ) }\n        </>\n      </div>\n    );\n  }\n}\n\nexport default Wordcloud;\n"]},"metadata":{},"sourceType":"module"}