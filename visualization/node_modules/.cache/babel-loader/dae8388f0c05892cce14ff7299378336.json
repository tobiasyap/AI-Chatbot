{"ast":null,"code":"var _jsxFileName = \"/Users/xuehui/Desktop/NUS_Stuff/AY2122.1_Y4S1/Capstone/lta-visualization/frontend/src/components/Barchart.js\";\nimport { Component } from 'react'; // import { useState, useEffect } from 'react';\n\nimport { BarChart, CartesianGrid, XAxis, YAxis, Tooltip, Bar, Legend } from 'recharts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Barchart extends Component {\n  constructor(props) {\n    super(props);\n\n    this.loadData = async () => {\n      let response = await fetch(\"http://localhost:8080/api/feedback\", {\n        method: \"GET\"\n      });\n      let data = await response.json();\n      let wordFreq = [];\n      let allWords = {};\n\n      for (let i = 0; i < data.length; i++) {\n        var words = data[i].user_query.split(\" \");\n\n        for (let j = 0; j < words.length; j++) {\n          if (!(words[j] in allWords)) {\n            allWords[words[j]] = 1;\n          } else {\n            allWords[words[j]] += 1;\n          }\n        }\n      }\n\n      for (var word in allWords) {\n        wordFreq.push([word, allWords[word]]);\n      }\n\n      wordFreq = wordFreq.sort((a, b) => b[1] - a[1]);\n      wordFreq = wordFreq.map(_ref => {\n        let [key, data] = _ref;\n        return {\n          key,\n          data\n        };\n      });\n      await this.setState({\n        barData: wordFreq,\n        loaded: true\n      });\n      console.log(this.state.barData); // return wordFrequencyData;\n    };\n\n    this.loadData = this.loadData.bind(this);\n    this.state = {\n      loaded: false,\n      barData: []\n    };\n  }\n\n  async componentDidMount() {\n    if (!this.state.loaded) {\n      await this.loadData();\n    } // await this.setState({\n    //   barData: data\n    // });\n    // console.log(data);\n    // await this.calculateOccurrence(data);\n    // if (this.state.loaded === false) {\n    //   await this.setState({\n    //     loaded: true,\n    //     barData: data\n    //   });\n    // }\n    // setBarData(calculateOccurrence(data).map(([key, data]) => ({key, data})))\n\n  }\n\n  render() {\n    const {\n      barData\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(BarChart // data={barData.map(([key, data]) => ({key, data}))}\n      , {\n        data: barData // data={[\n        //   {key: \"A\", data: 1},\n        //   {key: \"B\", data: 2}\n        // ]}\n        ,\n        height: 300,\n        width: 500,\n        children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n          strokeDasharray: \"3 3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n          dataKey: \"word\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Bar, {\n          dataKey: \"word\",\n          fill: \"#8884d8\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Bar, {\n          dataKey: \"count\",\n          fill: \"#8884d8\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Barchart; // export default function Barchart() {\n//     const [barData, setBarData] = useState([]);\n//     // const uploadData = new FormData(data.target);\n//     // const backendUrl = \"http://localhost:8080\"; // change to whatever\n//     // axios.get(`${backendUrl}/api/feedback`)\n//     //   .then((res) => {\n//     //     setSubmitted(res);\n//     //   })\n//     //   .catch((error) => {\n//     //     setError(error);\n//     //     console.log(error)\n//     //   });\n//     function calculateOccurrence(data) {\n//       let wordFreq = [];\n//       let allWords = {};\n//       for (let i=0; i < data.length; i++) {\n//         var words = data[i].user_query.split(\" \")\n//         for (let j=0; j < words.length; j++) {\n//           if (!(words[j] in allWords)) {\n//             allWords[words[j]] = 1\n//           } else {\n//             allWords[words[j]] += 1\n//           }\n//         }\n//       }\n//       for (var word in allWords) {\n//         wordFreq.push([word, allWords[word]])\n//       }\n//       wordFreq = wordFreq.sort((a, b) => b[1] - a[1]);\n//       // let wordFrequencyData = [];\n//       // for (let i=0; i < wordFreq.length; i++) {\n//       //   wordFrequencyData.push({ key: wordFreq[i][0], data: wordFreq[i][1] });\n//       // // var wordFreq = wordFrequencyData.map(([key, data]) => ({key, data}));\n//       // }\n//       var wordFrequencyData = wordFreq.map(([key, data]) => ({key, data}));\n//       console.log(wordFrequencyData);\n//       return wordFrequencyData;\n//     };\n//     useEffect(() => {\n//         let isMounted = true;\n//         fetch(\"http://localhost:8080/api/feedback\", {\n//           method: \"GET\"\n//         })\n//         .then(res => res.json())\n//         .then(data => {\n//           if (isMounted) setBarData(calculateOccurrence(data));\n//           // setBarData(calculateOccurrence(data).map(([key, data]) => ({key, data})))\n//         });\n//         return () => { isMounted = false};\n//       // async function getFeedback() {\n//         //   let res = await fetch(\"http://localhost:8080/api/feedback\");\n//         //   res = await res.json();\n//         //   setBarData(barData => ([...barData, calculateOccurrence(res)])); \n//         //   console.log(barData); \n//         // };\n//         // getFeedback();\n//     }, []);\n//     return (\n//       <div>\n//         <BarChart \n//         data={barData}\n//         // data={[\n//         //   {key: \"A\", data: 1},\n//         //   {key: \"B\", data: 2}\n//         // ]}\n//         height={300}\n//         width={300}\n//         />\n//         Barchart here! \n//       </div>\n//     )\n// }","map":{"version":3,"sources":["/Users/xuehui/Desktop/NUS_Stuff/AY2122.1_Y4S1/Capstone/lta-visualization/frontend/src/components/Barchart.js"],"names":["Component","BarChart","CartesianGrid","XAxis","YAxis","Tooltip","Bar","Legend","Barchart","constructor","props","loadData","response","fetch","method","data","json","wordFreq","allWords","i","length","words","user_query","split","j","word","push","sort","a","b","map","key","setState","barData","loaded","console","log","state","bind","componentDidMount","render"],"mappings":"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","sourcesContent":["import { Component } from 'react';\n// import { useState, useEffect } from 'react';\nimport { BarChart, CartesianGrid, XAxis, YAxis, Tooltip, Bar, Legend } from 'recharts';\n\nclass Barchart extends Component {\n  constructor(props) {\n    super(props);\n    this.loadData = this.loadData.bind(this);\n    this.state = {\n      loaded: false,\n      barData: []\n    }\n  }\n\n  async componentDidMount() {\n    if (!(this.state.loaded)) {\n      await this.loadData();\n    }\n\n    // await this.setState({\n    //   barData: data\n    // });\n    // console.log(data);\n    // await this.calculateOccurrence(data);\n    // if (this.state.loaded === false) {\n    //   await this.setState({\n    //     loaded: true,\n    //     barData: data\n    //   });\n    // }\n    // setBarData(calculateOccurrence(data).map(([key, data]) => ({key, data})))\n  }\n\n  loadData = async () => { \n    let response = await fetch(\"http://localhost:8080/api/feedback\", {\n      method: \"GET\"\n    });\n\n    let data = await response.json();\n      let wordFreq = [];\n      let allWords = {};\n      for (let i=0; i < data.length; i++) {\n        var words = data[i].user_query.split(\" \")\n        for (let j=0; j < words.length; j++) {\n          if (!(words[j] in allWords)) {\n            allWords[words[j]] = 1\n          } else {\n            allWords[words[j]] += 1\n          }\n        }\n      }\n      for (var word in allWords) {\n        wordFreq.push([word, allWords[word]])\n      }\n      wordFreq = wordFreq.sort((a, b) => b[1] - a[1]);\n      wordFreq = wordFreq.map(([key, data]) => ({key, data}));\n      await this.setState({\n        barData: wordFreq,\n        loaded: true\n      });\n      console.log(this.state.barData)\n      // return wordFrequencyData;\n  }\n\n  render() {\n    const { barData } = this.state;\n\n    return (\n      <div>\n        <BarChart \n        // data={barData.map(([key, data]) => ({key, data}))}\n        data={barData}\n        // data={[\n        //   {key: \"A\", data: 1},\n        //   {key: \"B\", data: 2}\n        // ]}\n        height={300}\n        width={500}\n        >\n          <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis dataKey=\"word\" />\n        <YAxis />\n        <Tooltip />\n        <Legend />\n          <Bar dataKey=\"word\" fill=\"#8884d8\" />\n          <Bar dataKey=\"count\" fill=\"#8884d8\" />\n        </BarChart>\n      </div>\n    )\n  }\n}\n\nexport default Barchart;\n\n// export default function Barchart() {\n//     const [barData, setBarData] = useState([]);\n\n//     // const uploadData = new FormData(data.target);\n//     // const backendUrl = \"http://localhost:8080\"; // change to whatever\n//     // axios.get(`${backendUrl}/api/feedback`)\n//     //   .then((res) => {\n//     //     setSubmitted(res);\n//     //   })\n//     //   .catch((error) => {\n//     //     setError(error);\n//     //     console.log(error)\n//     //   });\n//     function calculateOccurrence(data) {\n//       let wordFreq = [];\n//       let allWords = {};\n//       for (let i=0; i < data.length; i++) {\n//         var words = data[i].user_query.split(\" \")\n//         for (let j=0; j < words.length; j++) {\n//           if (!(words[j] in allWords)) {\n//             allWords[words[j]] = 1\n//           } else {\n//             allWords[words[j]] += 1\n//           }\n//         }\n//       }\n//       for (var word in allWords) {\n//         wordFreq.push([word, allWords[word]])\n//       }\n//       wordFreq = wordFreq.sort((a, b) => b[1] - a[1]);\n//       // let wordFrequencyData = [];\n//       // for (let i=0; i < wordFreq.length; i++) {\n//       //   wordFrequencyData.push({ key: wordFreq[i][0], data: wordFreq[i][1] });\n//       // // var wordFreq = wordFrequencyData.map(([key, data]) => ({key, data}));\n//       // }\n//       var wordFrequencyData = wordFreq.map(([key, data]) => ({key, data}));\n//       console.log(wordFrequencyData);\n//       return wordFrequencyData;\n//     };\n\n//     useEffect(() => {\n//         let isMounted = true;\n//         fetch(\"http://localhost:8080/api/feedback\", {\n//           method: \"GET\"\n//         })\n//         .then(res => res.json())\n//         .then(data => {\n//           if (isMounted) setBarData(calculateOccurrence(data));\n//           // setBarData(calculateOccurrence(data).map(([key, data]) => ({key, data})))\n//         });\n//         return () => { isMounted = false};\n//       // async function getFeedback() {\n//         //   let res = await fetch(\"http://localhost:8080/api/feedback\");\n//         //   res = await res.json();\n//         //   setBarData(barData => ([...barData, calculateOccurrence(res)])); \n//         //   console.log(barData); \n//         // };\n\n//         // getFeedback();\n//     }, []);\n\n//     return (\n//       <div>\n//         <BarChart \n//         data={barData}\n//         // data={[\n//         //   {key: \"A\", data: 1},\n//         //   {key: \"B\", data: 2}\n//         // ]}\n//         height={300}\n//         width={300}\n//         />\n//         Barchart here! \n//       </div>\n//     )\n// }"]},"metadata":{},"sourceType":"module"}