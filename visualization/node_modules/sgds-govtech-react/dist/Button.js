function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "react", "prop-types", "./lib/getUnhandledProps"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("react"), require("prop-types"), require("./lib/getUnhandledProps"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.react, global.propTypes, global.getUnhandledProps);
    global.Button = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _react, _propTypes, _getUnhandledProps) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _react = _interopRequireWildcard(_react);
  _propTypes = _interopRequireDefault(_propTypes);
  _getUnhandledProps = _interopRequireDefault(_getUnhandledProps);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

  function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  var Button = /*#__PURE__*/function (_Component) {
    _inherits(Button, _Component);

    var _super = _createSuper(Button);

    function Button(props) {
      var _this;

      _classCallCheck(this, Button);

      _this = _super.call(this, props);

      _defineProperty(_assertThisInitialized(_this), "onClick", function () {
        if (!_this.props.disabled) {
          _this.props.onClick();
        }
      });

      _this.state = {
        hovered: false,
        focused: false
      };
      return _this;
    } // Handle button hovered


    _createClass(Button, [{
      key: "mouseHoverOn",
      value: function mouseHoverOn() {
        this.setState({
          hovered: true
        });
      }
    }, {
      key: "mouseHoverOff",
      value: function mouseHoverOff() {
        this.setState({
          hovered: false
        });
      }
    }, {
      key: "getSize",
      value: function getSize() {
        var size = "";

        if (this.props.buttonSize === "small") {
          size = " is-small";
        } else if (this.props.buttonSize === "medium") {
          size = " is-medium";
        } else if (this.props.buttonSize === "large") {
          size = " is-large";
        }

        return size;
      }
    }, {
      key: "getColorType",
      value: function getColorType() {
        if (this.props.colorType === "success") {
          return " is-success";
        }

        if (this.props.colorType === "warning") {
          return " is-warning";
        }

        if (this.props.colorType === "danger") {
          return " is-danger";
        }

        if (this.props.colorType === "info") {
          return " is-info";
        }

        return "";
      } // isPrimary, isOutlined, isRounded, disabled, buttonSize

    }, {
      key: "getClassName",
      value: function getClassName() {
        var className = this.props.isSecondary ? "sgds-sec-button" : "sgds-button";

        if (this.props.isPrimary) {
          className = className.concat(" is-primary");
        }

        if (this.props.isOutlined) {
          className = className.concat(" is-outlined");
        }

        if (this.props.isRounded) {
          className = className.concat(" is-rounded");
        }

        if (this.props.isLoading) {
          className = className.concat(" is-loading");
        }

        className = className.concat(this.getSize());
        className = className.concat(this.getColorType());
        return className.concat(" ".concat(this.props.className || ""));
      }
    }, {
      key: "getStyle",
      value: function getStyle() {
        if (this.props.isOutlined) {
          return _objectSpread({
            paddingLeft: this.props.paddingHorizontal,
            paddingRight: this.props.paddingHorizontal,
            paddingTop: this.props.paddingVertical,
            paddingBottom: this.props.paddingVertical,
            borderColor: this.props.primaryColor,
            backgroundColor: this.state.hovered || this.state.focused ? this.props.primaryColor : "transparent",
            color: this.state.hovered || this.state.focused ? "#fff" : this.props.primaryColor
          }, this.props.style);
        } else {
          return _objectSpread({
            paddingLeft: this.props.paddingHorizontal,
            paddingRight: this.props.paddingHorizontal,
            paddingTop: this.props.paddingVertical,
            paddingBottom: this.props.paddingVertical,
            backgroundColor: this.props.primaryColor
          }, this.props.style);
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        var rest = (0, _getUnhandledProps.default)(Button.propTypes, this.props);
        return /*#__PURE__*/_react.default.createElement("button", _extends({
          className: this.getClassName(),
          style: this.getStyle(),
          disabled: this.props.isDisabled,
          onMouseEnter: function onMouseEnter() {
            return _this2.setState({
              hovered: true
            });
          },
          onMouseLeave: function onMouseLeave() {
            return _this2.setState({
              hovered: false
            });
          },
          onClick: this.onClick,
          onFocus: function onFocus() {
            return _this2.setState({
              focused: true
            });
          },
          onBlur: function onBlur() {
            return _this2.setState({
              focused: false
            });
          }
        }, rest), this.props.children);
      }
    }]);

    return Button;
  }(_react.Component);

  Button.propTypes = {
    className: _propTypes.default.string,
    style: _propTypes.default.object,
    isPrimary: _propTypes.default.bool,
    isLoading: _propTypes.default.bool,
    isSecondary: _propTypes.default.bool,
    isOutlined: _propTypes.default.bool,
    isRounded: _propTypes.default.bool,
    buttonSize: _propTypes.default.string,
    isDisabled: _propTypes.default.bool,
    paddingHorizontal: _propTypes.default.number,
    paddingVertical: _propTypes.default.number,
    primaryColor: _propTypes.default.string,
    onClick: _propTypes.default.func,
    colorType: _propTypes.default.string
  };
  Button.defaultProps = {
    onClick: function onClick() {}
  };
  var _default = Button;
  _exports.default = _default;
});
//# sourceMappingURL=Button.js.map