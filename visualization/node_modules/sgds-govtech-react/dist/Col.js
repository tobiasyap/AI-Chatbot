(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "react", "prop-types"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("react"), require("prop-types"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.react, global.propTypes);
    global.Col = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _react, _propTypes) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _react = _interopRequireDefault(_react);
  _propTypes = _interopRequireDefault(_propTypes);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function Col(props) {
    var getSelfClassName = function getSelfClassName() {
      var _props$className;

      return (_props$className = props.className) !== null && _props$className !== void 0 ? _props$className : false;
    };

    var getClassName = function getClassName() {
      var className = "col";

      if (props.is) {
        className = "".concat(className, " is-").concat(props.is);
      }

      if (props.isOffset) {
        className = "".concat(className, " is-offset-").concat(props.isOffset);
      }

      if (props.isNested) {
        className = "".concat(className, " is-nested");
      }

      if (props.isNarrow) {
        className = "".concat(className, " is-narrow");
      }

      if (props.isMobile) {
        className = "".concat(className, " is-").concat(props.isMobile, "-mobile");
      }

      if (props.isTablet) {
        className = "".concat(className, " is-").concat(props.isTablet, "-tablet");
      }

      if (props.isDesktop) {
        className = "".concat(className, " is-").concat(props.isDesktop, "-desktop");
      }

      if (props.isWidescreen) {
        className = "".concat(className, " is-").concat(props.isWidescreen, "-widescreen");
      }

      if (props.isFullHd) {
        className = "".concat(className, " is-").concat(props.isFullHd, "-fullhd");
      }

      if (getSelfClassName()) {
        return "".concat(className, " ").concat(getSelfClassName());
      } else {
        return className;
      }
    };

    return /*#__PURE__*/_react.default.createElement("div", {
      className: getClassName(),
      style: props.style
    }, props.children);
  }

  Col.propTypes = {
    is: _propTypes.default.number,
    isOffset: _propTypes.default.number,
    isNested: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.string]),
    isNarrow: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.string]),
    isMobile: _propTypes.default.number,
    isTablet: _propTypes.default.number,
    isDesktop: _propTypes.default.number,
    isWidescreen: _propTypes.default.number,
    isFullHd: _propTypes.default.number,
    style: _propTypes.default.object,
    className: _propTypes.default.string
  };
  var _default = Col;
  _exports.default = _default;
});
//# sourceMappingURL=Col.js.map